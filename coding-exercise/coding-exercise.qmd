---
title: "R Coding Exercise"
---

First thing we will do is load in the libraries we need for the following code.

```{r}
library('dslabs') #This loads in the dslabs library. You will fist need to install the package before running this command.
library(tidyverse) # library for data processing tasks.

help(gapminder)#look at help file for gapminder data
```

### Overview of the gapminder data

Here we show some quick functions to learn your dataset and its variables quickly.

```{r}
str(gapminder) # this code gives the variable descriptions/information
summary(gapminder) # this gives you quick summary statistics of each variable
class(gapminder) # this gives the object of gapminder
```

Write code that assigns only the African countries to a new object/variable called africadata. Run str and summary on the new object you created. You should now have 2907 observations, down from 10545. Depending on how you do this, you might also notice that all the different categories are still kept in the continent (and other) variables, but show 0. R does not automatically remove categories of what in R is called a factor variable (a categorical variable) even if they are empty. We don’t have to worry about that just now, but something to keep in mind, it can sometimes lead to strange behavior.

```{r}
africadata <- gapminder %>% filter(continent == 'Africa') #filters for Africa continent only
str(africadata) # variable description
summary(africadata) #variables summary statistics
```

Take the africadata object and create two new objects (name them whatever you want), one that contains only infant_mortality and life_expectancy and one that contains only population and life_expectancy. You should have two new objects/variables with 2907 rows and two columns. Use the str, and summary commands to take a look at both. Make sure you add comments into your code to explain what each line of code is doing, and as needed, also add additional explanatory Markdown text to your Quarto file.

```{r}
a1 <- africadata %>% select(infant_mortality, life_expectancy) #this  selects the 2 variables i want and assigns it to a1
str(a1)# variable description
summary(a1)#variables summary statistics

a2 <- africadata %>% select(population, life_expectancy) #this  selects the 2 variables i want and assigns it to a2
str(a2)# variable description
summary(a2)#variables summary statistics

```

Using the new variables you created, plot life expectancy as a function of infant mortality and as a function of population size. Make two separate plots. Plot the data as points. For the plot with population size on the x-axis, set the x-axis to a log scale.

```{r}
a1 %>% ggplot(aes(x=infant_mortality, y=life_expectancy)) +
  geom_point() # we use ggplot to make these scatterplots


a2 %>% ggplot(aes(x=log(population), y=life_expectancy)) +
  geom_point()# we use ggplot to make these scatterplots
```

There seems to be 'streaks' of data that are plotted together in both plots. This looks like it is each year that is in Africa and it shows its trend for each streak.

I’m sure you realized that the pattern we see in the data is due to the fact that we have different years for individual countries, and that over time these countries increase in population size and also life expectancy. Let’s pick only one year and see what patterns we find. We want a year for which we have the most data. You might have noticed that in africadata, there are 226 NA (i.e., missing values) for infant mortality. Write code that figures out which years have missing data for infant mortality. You should find that there is missing up to 1981 and then again for 2016. So we’ll avoid those years and go with 2000 instead. Create a new object by extracting only the data for the year 2000 from the africadata object. You should end up with 51 observations and 9 variables. Check it with str and summary.

```{r}
a2000 <- africadata %>% filter(year == 2000) #only year 2000
str(a2000) # variable description
summary(a2000) #variables summary statistics

```

Let’s make the same plots as above again, this time only for the year 2000. Based on those plots, there seems to still be a negative correlation between infant mortality and life expectancy, and no noticeable correlation between population size and life expectancy. Let’s apply some statistical model to this data.

```{r}
a2000 %>% ggplot(aes(x=infant_mortality, y=life_expectancy)) +
  geom_point() # we use ggplot to make these scatterplots


a2000 %>% ggplot(aes(x=log(population), y=life_expectancy)) +
  geom_point()# we use ggplot to make these scatterplots
```

Use the lm function and fit life expectancy as the outcome, and infant mortality as the predictor. Then repeat, now with the population size as the predictor variable. (Use the data from 2000 only.) Save the result from the two fits into two objects (e.g. fit1 and fit2) and apply the summary command to both, which will print various fit results to the screen. Based on the p-values for each fit, what do you conclude? Add comments into your quarto file to explain what you did and found.

```{r}
fit1 <- lm(life_expectancy ~ infant_mortality, data = a2000) # linear model with life_expectancy as the outcome variable and infant mortanlity as the predictor
summary(fit1) #summary statistics of the linear model

fit2 <- lm(life_expectancy ~ population, data = a2000) # linear model with life_expectancy as the outcome variable and infant mortanlity as the predictor
summary(fit2) #summary statistics of the linear model
```

Looking at the p-values, we see the model 'fit1' has a p-value \< 0.05 which means the model is significant at predicting life expectancy using infant mortality. For 'fit2' we see the p-value is \> then 0.05 which means the model is not significant at predicting life expectancy using population.
